{"version":3,"file":"js/828.2c88d27b.js","mappings":"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","sources":["webpack://ts-project/./src/utils/initThreeTemplate.ts"],"sourcesContent":["\r\nimport { defineComponent, h, withDirectives, resolveDirective } from 'vue'\r\nimport * as THREE from 'three' //导入整个 three.js核心库\r\nimport { OrbitControls } from 'three/examples/jsm/controls/OrbitControls' //导入控制器模块，轨道控制器\r\nimport { GLTFLoader } from 'three/examples/jsm/loaders/GLTFLoader' //导入GLTF模块，模型解析器,根据文件格式来定\r\nimport { EffectComposer } from 'three/examples/jsm/postprocessing/EffectComposer.js'\r\nimport { RenderPass } from 'three/examples/jsm/postprocessing/RenderPass.js'\r\nimport { OutlinePass } from 'three/examples/jsm/postprocessing/OutlinePass.js'\r\nimport { OutputPass } from 'three/examples/jsm/postprocessing/OutputPass.js'\r\nimport { ShaderPass } from 'three/examples/jsm/postprocessing/ShaderPass.js'\r\nimport { FXAAShader } from 'three/examples/jsm/shaders/FXAAShader.js'\r\nimport { UnrealBloomPass } from 'three/examples/jsm/postprocessing/UnrealBloomPass.js'\r\nimport { OBJLoader } from 'three/examples/jsm/loaders/OBJLoader'\r\nimport { FBXLoader } from 'three/examples/jsm/loaders/FBXLoader'\r\nimport { vertexShader, fragmentShader } from '@/config/constant'\r\nimport { mapImageList } from \"@/config/model\";\r\nimport { lightPosition, onlyKey, debounce } from '@/utils/utilityFunction'\r\nimport { SetModelType } from '@/types/renderOptions'\r\nimport { ElMessage } from 'element-plus'\r\n\r\n/**\r\n * @describe three.js 组件数据初始化方法\r\n * @param config 组件参数配置信息\r\n*/\r\n\r\nclass renderModel {\r\n\tconfig: any\r\n\tcontainer: any\r\n\tcamera: any\r\n\tscene: any\r\n\trenderer: any\r\n\tcontrols: any\r\n\tmodel: any\r\n\tfileLoaderMap: { [key: string]: any; }\r\n\tmodelAnimation: any\r\n\tanimationMixer: any\r\n\tanimationColock: THREE.Clock | null\r\n\tanimationFrame: any\r\n\trotationAnimationFrame: any\r\n\tanimateClipAction: any\r\n\tloopMap: { [key: string]: number }\r\n\tskeletonHelper: any\r\n\tgridHelper: any\r\n\taxesHelper: any\r\n\tplaneGeometry: any\r\n\tmodelMaterialList: any\r\n\teffectComposer: any\r\n\toutlinePass: any\r\n\trenderAnimation: any\r\n\traycaster: THREE.Raycaster\r\n\tmouse: THREE.Vector2 | null\r\n\tmodelTextureMap: any\r\n\tglowComposer: any\r\n\tunrealBloomPass: any\r\n\tglowMaterialList: any\r\n\tmaterials: { [key: string]: any }\r\n\tonWindowResizesListener: any\r\n\tonMouseMoveListener: any\r\n\tconstructor(config: any, elementId: string) {\r\n\t\tthis.config = config\r\n\t\tthis.container = document.querySelector('#' + elementId)\r\n\t\t// 相机\r\n\t\tthis.camera\r\n\t\t// 场景\r\n\t\tthis.scene\r\n\t\t//渲染器\r\n\t\tthis.renderer\r\n\t\t// 控制器\r\n\t\tthis.controls\r\n\t\t// 模型\r\n\t\tthis.model\r\n\t\t//文件加载器类型\r\n\t\tthis.fileLoaderMap = {\r\n\t\t\t'glb': new GLTFLoader(),\r\n\t\t\t'fbx': new FBXLoader(),\r\n\t\t\t'gltf': new GLTFLoader(),\r\n\t\t\t'obj': new OBJLoader(),\r\n\t\t}\r\n\t\t//模型动画列表\r\n\t\tthis.modelAnimation\r\n\t\t//模型动画对象\r\n\t\tthis.animationMixer\r\n\t\tthis.animationColock = new THREE.Clock()\r\n\t\t// 动画帧\r\n\t\tthis.animationFrame\r\n\t\t// 轴动画帧\r\n\t\tthis.rotationAnimationFrame\r\n\t\t// 动画构造器\r\n\t\tthis.animateClipAction = null\r\n\t\t// 动画循环方式枚举\r\n\t\tthis.loopMap = {\r\n\t\t\tLoopOnce: THREE.LoopOnce,\r\n\t\t\tLoopRepeat: THREE.LoopRepeat,\r\n\t\t\tLoopPingPong: THREE.LoopPingPong\r\n\t\t}\r\n\t\t// 模型骨架\r\n\t\tthis.skeletonHelper\r\n\t\t// 网格辅助线\r\n\t\tthis.gridHelper\r\n\t\t// 坐标轴辅助线\r\n\t\tthis.axesHelper\r\n\t\t//模型平面\r\n\t\tthis.planeGeometry\r\n\t\t//模型材质列表\r\n\t\tthis.modelMaterialList\r\n\t\t// 效果合成器\r\n\t\tthis.effectComposer\r\n\t\tthis.outlinePass\r\n\t\t// 动画渲染器\r\n\t\tthis.renderAnimation\r\n\t\t// 碰撞检测\r\n\t\tthis.raycaster = new THREE.Raycaster()\r\n\t\t// 鼠标位置\r\n\t\tthis.mouse = new THREE.Vector2()\r\n\t\t// 模型自带贴图\r\n\t\tthis.modelTextureMap\r\n\t\t// 辉光效果合成器\r\n\t\tthis.glowComposer\r\n\t\t// 辉光渲染器\r\n\t\tthis.unrealBloomPass\r\n\t\t// 需要辉光的材质\r\n\t\tthis.glowMaterialList\r\n\t\tthis.materials = {}\r\n\t\t// 窗口变化监听事件\r\n\t\tthis.onWindowResizesListener\r\n\t\t// 鼠标移动\r\n\t\tthis.onMouseMoveListener\r\n\t}\r\n\tinit() {\r\n\t\treturn new Promise(async (reslove, reject) => {\r\n\t\t\t//初始化渲染器\r\n\t\t\tthis.initRender()\r\n\t\t\t// //初始化相机\r\n\t\t\tthis.initCamera()\r\n\t\t\t//初始化场景\r\n\t\t\tthis.initScene()\r\n\t\t\t//初始化控制器，控制摄像头,控制器一定要在渲染器后\r\n\t\t\tthis.initControls()\r\n\r\n\t\t\tconst load = await this.loadModel(this.config.fileInfo)\r\n\t\t\t// 创建效果合成器\r\n\t\t\tthis.createEffectComposer()\r\n\t\t\t// 设置背景信息\r\n\t\t\tthis.setSceneBackground()\r\n\t\t\t// 设置模型材质信息\r\n\t\t\tthis.setModelMeaterial()\r\n\t\t\t// 设置后期/操作信息\r\n\t\t\tthis.setModelLaterStage()\r\n\t\t\t// 设置灯光信息\r\n\t\t\tthis.setSceneLight()\r\n\t\t\t// 设置模型动画信息\r\n\t\t\tthis.setModelAnimation()\r\n\t\t\t// 设置模型轴/辅助线信息\r\n\t\t\tthis.setModelAxleLine()\r\n\t\t\t//场景渲染\r\n\t\t\tthis.sceneAnimation()\r\n\t\t\tthis.addEvenListMouseLisatener()\r\n\t\t\treslove(load)\r\n\t\t})\r\n\t}\r\n\t// 创建渲染器\r\n\tinitRender() {\r\n\t\tthis.renderer = new THREE.WebGLRenderer({ antialias: true, alpha: true }) //设置抗锯齿\r\n\t\t//设置屏幕像素比\r\n\t\tthis.renderer.setPixelRatio(window.devicePixelRatio)\r\n\t\t//渲染的尺寸大小\r\n\t\tconst { clientHeight, clientWidth } = this.container\r\n\t\tthis.renderer.setSize(clientWidth, clientHeight)\r\n\t\t//色调映射\r\n\t\tthis.renderer.toneMapping = THREE.ReinhardToneMapping\r\n\t\tthis.renderer.autoClear = true\r\n\t\t// this.renderer.outputColorSpace = THREE.sRGBEncoding\r\n\t\t//曝光\r\n\t\tthis.renderer.toneMappingExposure = 3\r\n\t\tthis.renderer.shadowMap.enabled = true\r\n\t\tthis.renderer.shadowMap.type = THREE.PCFSoftShadowMap\r\n\t\tconst meshTxt = document.createElement('div')\r\n\t\tmeshTxt.id = 'mesh-txt'\r\n\t\tthis.container.appendChild(meshTxt)\r\n\t\tthis.container.appendChild(this.renderer.domElement)\r\n\t}\r\n\t// 创建相机\r\n\tinitCamera() {\r\n\t\tconst { clientHeight, clientWidth } = this.container\r\n\t\tthis.camera = new THREE.PerspectiveCamera(45, clientWidth / clientHeight, 0.25, 1000)\r\n\t\tthis.camera.near = 0.1\r\n\t\tconst { camera } = this.config\r\n\t\tif (!camera) return false\r\n\t\tconst { x, y, z } = camera\r\n\t\tthis.camera.position.set(x, y, z)\r\n\t\tthis.camera.updateProjectionMatrix()\r\n\t}\r\n\t// 创建场景\r\n\tinitScene() {\r\n\t\tthis.scene = new THREE.Scene()\r\n\t}\r\n\taddEvenListMouseLisatener() {\r\n\t\t// 监听场景大小改变，跳转渲染尺寸\r\n\t\tthis.onWindowResizesListener = this.onWindowResize.bind(this)\r\n\t\twindow.addEventListener(\"resize\", this.onWindowResizesListener)\r\n\r\n\t\t// 鼠标移动\r\n\t\tthis.onMouseMoveListener = this.onMouseMoveModel.bind(this)\r\n\t\tthis.container.addEventListener('mousemove', this.onMouseMoveListener)\r\n\t}\r\n\t// 创建控制器\r\n\tinitControls() {\r\n\t\tthis.controls = new OrbitControls(this.camera, this.renderer.domElement)\r\n\t\tthis.controls.enablePan = true\r\n\t\tthis.controls.enabled = true\r\n\t}\r\n\t// 更新场景\r\n\tsceneAnimation() {\r\n\t\tthis.renderAnimation = requestAnimationFrame(() => this.sceneAnimation())\r\n\t\tthis.controls.update()\r\n\t\t// 将不需要处理辉光的材质进行存储备份\r\n\t\tthis.scene.traverse((v: { background: null; name: any; isMesh: any; uuid: string | number; material: THREE.MeshBasicMaterial }) => {\r\n\t\t\tif (v instanceof THREE.Scene) {\r\n\t\t\t\tthis.materials.scene = v.background\r\n\t\t\t\tv.background = null\r\n\t\t\t}\r\n\t\t\tif (!this.glowMaterialList.includes(v.name) && v.isMesh) {\r\n\t\t\t\tthis.materials[v.uuid] = v.material\r\n\t\t\t\tv.material = new THREE.MeshBasicMaterial({ color: 'black' })\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.glowComposer.render()\r\n\t\t// 在辉光渲染器执行完之后在恢复材质原效果\r\n\t\tthis.scene.traverse((v: { uuid: string | number; material: any; background: any }) => {\r\n\t\t\tif (this.materials[v.uuid]) {\r\n\t\t\t\tv.material = this.materials[v.uuid]\r\n\t\t\t\tdelete this.materials[v.uuid]\r\n\t\t\t}\r\n\t\t\tif (v instanceof THREE.Scene) {\r\n\t\t\t\tv.background = this.materials.scene\r\n\t\t\t\tdelete this.materials.scene\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.effectComposer.render()\r\n\t}\r\n\t// 创建效果合成器\r\n\tcreateEffectComposer() {\r\n\t\tconst { clientHeight, clientWidth } = this.container\r\n\t\tthis.effectComposer = new EffectComposer(this.renderer)\r\n\t\tconst renderPass = new RenderPass(this.scene, this.camera)\r\n\t\tthis.effectComposer.addPass(renderPass)\r\n\t\tthis.outlinePass = new OutlinePass(new THREE.Vector2(clientWidth, clientHeight), this.scene, this.camera)\r\n\t\tthis.outlinePass.visibleEdgeColor = new THREE.Color('#FF8C00') // 可见边缘的颜色\r\n\t\tthis.outlinePass.hiddenEdgeColor = new THREE.Color('#8a90f3') // 不可见边缘的颜色\r\n\t\tthis.outlinePass.edgeGlow = 2.0 // 发光强度\r\n\t\tthis.outlinePass.edgeThickness = 1 // 边缘浓度\r\n\t\tthis.outlinePass.edgeStrength = 4 // 边缘的强度，值越高边框范围越大\r\n\t\tthis.outlinePass.pulsePeriod = 100 // 闪烁频率，值越大频率越低\r\n\t\tthis.effectComposer.addPass(this.outlinePass)\r\n\t\tlet outputPass = new OutputPass()\r\n\t\tthis.effectComposer.addPass(outputPass)\r\n\r\n\t\tlet effectFXAA = new ShaderPass(FXAAShader)\r\n\t\tconst pixelRatio = this.renderer.getPixelRatio()\r\n\t\teffectFXAA.uniforms.resolution.value.set(1 / (clientWidth * pixelRatio), 1 / (clientHeight * pixelRatio))\r\n\t\teffectFXAA.renderToScreen = true\r\n\t\teffectFXAA.needsSwap = true\r\n\t\tthis.effectComposer.addPass(effectFXAA)\r\n\r\n\t\t//创建辉光效果\r\n\t\tthis.unrealBloomPass = new UnrealBloomPass(new THREE.Vector2(clientWidth, clientHeight), 0, 0, 0)\r\n\t\t// this.unrealBloomPass.threshold = 0\r\n\t\t// this.unrealBloomPass.strength = 0\r\n\t\t// this.unrealBloomPass.radius = 0\r\n\t\t// this.unrealBloomPass.renderToScreen = false\r\n\t\t// 辉光合成器\r\n\t\tconst renderTargetParameters = {\r\n\t\t\tminFilter: THREE.LinearFilter,\r\n\t\t\tmagFilter: THREE.LinearFilter,\r\n\t\t\tformat: THREE.RGBAFormat,\r\n\t\t\tstencilBuffer: false,\r\n\t\t};\r\n\t\tconst glowRender = new THREE.WebGLRenderTarget(clientWidth * 2, clientHeight * 2, renderTargetParameters)\r\n\t\tthis.glowComposer = new EffectComposer(this.renderer, glowRender)\r\n\t\tthis.glowComposer.renderToScreen = false\r\n\t\tthis.glowComposer.addPass(new RenderPass(this.scene, this.camera))\r\n\t\tthis.glowComposer.addPass(this.unrealBloomPass)\r\n\t\t// 着色器\r\n\t\tlet shaderPass = new ShaderPass(new THREE.ShaderMaterial({\r\n\t\t\tuniforms: {\r\n\t\t\t\tbaseTexture: { value: null },\r\n\t\t\t\tbloomTexture: { value: this.glowComposer.renderTarget2.texture },\r\n\t\t\t\ttDiffuse: {\r\n\t\t\t\t\tvalue: null\r\n\t\t\t\t}\r\n\t\t\t},\r\n\t\t\tvertexShader,\r\n\t\t\tfragmentShader,\r\n\t\t\tdefines: {}\r\n\t\t}), 'baseTexture')\r\n\r\n\t\tshaderPass.renderToScreen = true\r\n\t\tshaderPass.needsSwap = true\r\n\t\tthis.effectComposer.addPass(shaderPass)\r\n\r\n\t}\r\n\t// 加载模型\r\n\tloadModel(modelFile: SetModelType) {\r\n\t\tconst { filePath, fileType, scale, map, position } = modelFile\r\n\t\treturn new Promise((resolve, reject) => {\r\n\t\t\tconst loader = this.fileLoaderMap[fileType]\r\n\t\t\tloader.load(filePath, (result: any) => {\r\n\t\t\t\tswitch (fileType) {\r\n\t\t\t\t\tcase 'glb':\r\n\t\t\t\t\t\tthis.model = result.scene\r\n\t\t\t\t\t\tthis.skeletonHelper = new THREE.SkeletonHelper(result.scene)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'fbx':\r\n\t\t\t\t\t\tthis.model = result\r\n\t\t\t\t\t\tthis.skeletonHelper = new THREE.SkeletonHelper(result)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'gltf':\r\n\t\t\t\t\t\tthis.model = result.scene\r\n\t\t\t\t\t\tthis.skeletonHelper = new THREE.SkeletonHelper(result.scene)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tcase 'obj':\r\n\t\t\t\t\t\tthis.model = result\r\n\t\t\t\t\t\tthis.skeletonHelper = new THREE.SkeletonHelper(result)\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t\tdefault:\r\n\t\t\t\t\t\tbreak;\r\n\t\t\t\t}\r\n\t\t\t\tthis.getModelMeaterialList(map)\r\n\t\t\t\tthis.modelAnimation = result.animations || []\r\n\t\t\t\tthis.setModelPositionSize()\r\n\t\t\t\t//\t设置模型大小\r\n\t\t\t\tif (scale) {\r\n\t\t\t\t\tthis.model.scale.set(scale, scale, scale);\r\n\t\t\t\t}\r\n\t\t\t\t//设置模型位置 \r\n\t\t\t\tthis.model.position.set(0, -.5, 0)\r\n\t\t\t\tif (position) {\r\n\t\t\t\t\tconst { x, y, z } = position\r\n\t\t\t\t\tthis.model.position.set(x, y, z)\r\n\t\t\t\t}\r\n\t\t\t\tthis.skeletonHelper.visible = false\r\n\t\t\t\tthis.scene.add(this.skeletonHelper)\r\n\r\n\t\t\t\tthis.glowMaterialList = this.modelMaterialList.map((v: { name: any }) => v.name)\r\n\t\t\t\tthis.scene.add(this.model)\r\n\t\t\t\tresolve(true)\r\n\t\t\t}, () => {\r\n\r\n\t\t\t}, (err: any) => {\r\n\t\t\t\tElMessage.error('文件错误')\r\n\t\t\t\tconsole.log(err)\r\n\t\t\t\treject()\r\n\t\t\t})\r\n\t\t})\r\n\t}\r\n\tonWindowResize() {\r\n\t\tconst { clientHeight, clientWidth } = this.container\r\n\t\t//调整屏幕大小\r\n\t\tthis.camera.aspect = clientWidth / clientHeight //摄像机宽高比例\r\n\t\tthis.camera.updateProjectionMatrix() //相机更新矩阵，将3d内容投射到2d面上转换\r\n\t\tthis.renderer.setSize(clientWidth, clientHeight)\r\n\t\tif (this.effectComposer) this.effectComposer.setSize(clientWidth, clientHeight)\r\n\t\tif (this.glowComposer) this.glowComposer.setSize(clientWidth, clientHeight)\r\n\t}\r\n\t// 清除模型数据\r\n\tonClearModelData() {\r\n\t\tcancelAnimationFrame(this.rotationAnimationFrame)\r\n\t\tcancelAnimationFrame(this.renderAnimation)\r\n\t\tcancelAnimationFrame(this.animationFrame)\r\n\t\tthis.scene.traverse((v: { type: string; geometry: { dispose: () => void }; material: { dispose: () => void } }) => {\r\n\t\t\tif (v.type === 'Mesh') {\r\n\t\t\t\tv.geometry.dispose();\r\n\t\t\t\tv.material.dispose();\r\n\t\t\t}\r\n\t\t})\r\n\t\tthis.scene.clear()\r\n\t\tthis.renderer.clear()\r\n\t\tthis.renderer.dispose()\r\n\t\tthis.camera.clear()\r\n\t\tif (this.gridHelper) {\r\n\t\t\tthis.gridHelper.clear()\r\n\t\t\tthis.gridHelper.dispose()\r\n\t\t}\r\n\t\tif (this.axesHelper) {\r\n\t\t\tthis.axesHelper.clear()\r\n\t\t\tthis.axesHelper.dispose()\r\n\t\t}\r\n\t\tthis.effectComposer.dispose()\r\n\t\tthis.glowComposer.dispose()\r\n\t\tthis.container.removeEventListener('mousemove', this.onMouseMoveListener)\r\n\t\twindow.removeEventListener(\"resize\", this.onWindowResizesListener)\r\n\t\tthis.config = null\r\n\t\tthis.container = null\r\n\t\t// 相机\r\n\t\tthis.camera = null\r\n\t\t// 场景\r\n\t\tthis.scene = null\r\n\t\t//渲染器\r\n\t\tthis.renderer = null\r\n\t\t// 控制器\r\n\t\tthis.controls = null\r\n\t\t// 模型\r\n\t\tthis.model = null\r\n\t\t//文件加载器类型\r\n\t\tthis.fileLoaderMap = {}\r\n\t\t//模型动画列表\r\n\t\tthis.modelAnimation = null\r\n\t\t//模型动画对象\r\n\t\tthis.animationMixer = null\r\n\t\tthis.animationColock = null\r\n\t\t// 动画帧\r\n\t\tthis.animationFrame = null\r\n\t\t// 轴动画帧\r\n\t\tthis.rotationAnimationFrame = null\r\n\t\t// 动画构造器\r\n\t\tthis.animateClipAction = null\r\n\t\t// 动画循环方式枚举\r\n\t\tthis.loopMap = {}\r\n\t\t// 模型骨架\r\n\t\tthis.skeletonHelper = null\r\n\t\t// 网格辅助线\r\n\t\tthis.gridHelper = null\r\n\t\t// 坐标轴辅助线\r\n\t\tthis.axesHelper = null\r\n\t\t//模型平面\r\n\t\tthis.planeGeometry = null\r\n\t\t//模型材质列表\r\n\t\tthis.modelMaterialList = null\r\n\t\t// 效果合成器\r\n\t\tthis.effectComposer = null\r\n\t\tthis.outlinePass = null\r\n\t\t// 动画渲染器\r\n\t\tthis.renderAnimation = null\r\n\t\t// 碰撞检测\r\n\t\tthis.raycaster == null\r\n\t\t// 鼠标位置\r\n\t\tthis.mouse = null\r\n\t\t// 模型自带贴图\r\n\t\tthis.modelTextureMap = null\r\n\t\t// 辉光效果合成器\r\n\t\tthis.glowComposer = null\r\n\t\t// 辉光渲染器\r\n\t\tthis.unrealBloomPass = null\r\n\t\t// 需要辉光的材质\r\n\t\tthis.glowMaterialList = null\r\n\t\tthis.materials = {}\r\n\r\n\t}\r\n\r\n\t// 设置模型定位缩放大小\r\n\tsetModelPositionSize() {\r\n\t\t//设置模型位置\r\n\t\tthis.model.updateMatrixWorld()\r\n\t\tconst box = new THREE.Box3().setFromObject(this.model);\r\n\t\tconst size = box.getSize(new THREE.Vector3());\r\n\t\tconst center = box.getCenter(new THREE.Vector3());\r\n\t\t// 计算缩放比例\r\n\t\tconst maxSize = Math.max(size.x, size.y, size.z);\r\n\t\tconst targetSize = 2.5; // 目标大小\r\n\t\tconst scale = targetSize / (maxSize > 1 ? maxSize : .5);\r\n\t\tthis.model.scale.set(scale, scale, scale)\r\n\t\t// 设置模型位置\r\n\t\t// this.model.position.sub(center.multiplyScalar(scale))\r\n\t\t// 设置控制器最小缩放值\r\n\t\tthis.controls.maxDistance = size.length() * 10\r\n\t\t// 设置相机位置\r\n\t\t// this.camera.position.set(0, 2, 6)\r\n\t\t// 设置相机坐标系\r\n\t\tthis.camera.lookAt(center)\r\n\t\tthis.camera.updateProjectionMatrix();\r\n\r\n\t}\r\n\t// 获取当前模型材质\r\n\tgetModelMeaterialList(map: string) {\r\n\t\tconst isMap = map ? true : false\r\n\t\tthis.modelMaterialList = []\r\n\t\tthis.model.traverse((v: { isMesh: any; castShadow: boolean; frustumCulled: boolean; material: { clone?: any; map: any; name?: any; color?: any } }) => {\r\n\t\t\tif (v.isMesh) {\r\n\t\t\t\tv.castShadow = true\r\n\t\t\t\tv.frustumCulled = false\r\n\t\t\t\tif (v.material) {\r\n\t\t\t\t\tconst { name, color, map } = v.material\r\n\t\t\t\t\tconst newMaterial = v.material.clone()\r\n\t\t\t\t\tv.material = newMaterial\r\n\t\t\t\t\tthis.modelMaterialList.push(v)\r\n\t\t\t\t}\r\n\t\t\t\t// 部分模型本身没有贴图需 要单独处理\r\n\t\t\t\tif (v.material && isMap) {\r\n\t\t\t\t\tconst mapTexture = new THREE.TextureLoader().load(map)\r\n\t\t\t\t\tconst newMaterial = v.material.clone()\r\n\t\t\t\t\tv.material = newMaterial\r\n\t\t\t\t\tv.material.map = mapTexture\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t})\r\n\t}\r\n\r\n\t// 处理背景数据回填\r\n\tsetSceneBackground() {\r\n\t\tconst { background } = this.config\r\n\r\n\t\tif (!background) return false\r\n\t\tconst { color, image, viewImg } = background\r\n\r\n\t\t// 设置背景\r\n\t\tif (background.visible) {\r\n\t\t\tswitch (background.type) {\r\n\t\t\t\tcase 1:\r\n\t\t\t\t\tthis.scene.background = new THREE.Color(color)\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 2:\r\n\t\t\t\t\tthis.scene.background = new THREE.TextureLoader().load(image);\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tcase 3:\r\n\t\t\t\t\tconst texture = new THREE.TextureLoader().load(viewImg);\r\n\t\t\t\t\ttexture.mapping = THREE.EquirectangularReflectionMapping\r\n\t\t\t\t\tthis.scene.background = texture\r\n\t\t\t\t\tthis.scene.environment = texture\r\n\t\t\t\t\tbreak;\r\n\t\t\t\tdefault:\r\n\t\t\t\t\tbreak;\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tthis.scene.background = new THREE.Color('#000')\r\n\t\t}\r\n\t}\r\n\t// 处理模型材质数据回填\r\n\tsetModelMeaterial() {\r\n\t\tconst { material } = this.config\r\n\t\tif (!material || !material.meshList) return false\r\n\t\tconst mapIdList = mapImageList.map(v => v.id)\r\n\t\tmaterial.meshList.forEach((v: { meshName?: any; meshFrom?: any; color?: any; opacity?: any; depthWrite?: any; wireframe?: any; visible?: any; type?: any }) => {\r\n\t\t\tconst mesh = this.model.getObjectByProperty('name', v.meshName)\r\n\t\t\tconst { color, opacity, depthWrite, wireframe, visible, type } = v\r\n\t\t\tconst { map } = mesh.material\r\n\t\t\tif (material.materialType) {\r\n\t\t\t\tmesh.material = new (THREE as any)[type]({\r\n\t\t\t\t\tmap,\r\n\t\t\t\t})\r\n\t\t\t} else {\r\n\t\t\t\tmesh.material.map = map\r\n\t\t\t}\r\n\t\t\t// 处理修改了贴图的材质\r\n\t\t\tif (v.meshFrom) {\r\n\t\t\t\t// 如果使用的是系统贴图\r\n\t\t\t\tif (mapIdList.includes(v.meshFrom)) {\r\n\t\t\t\t\t// 找到当前的系统材质\r\n\t\t\t\t\tconst mapInfo = mapImageList.find(m => m.id == v.meshFrom) || {}\r\n\t\t\t\t\t// 加载系统材质贴图\r\n\t\t\t\t\tconst mapTexture = new THREE.TextureLoader().load(mapInfo.url)\r\n\t\t\t\t\t// 如果当前模型的材质类型被修改了，则使用用新的材质type\r\n\t\t\t\t\tif (material.materialType) {\r\n\t\t\t\t\t\tmesh.material = new (THREE as any)[type]({\r\n\t\t\t\t\t\t\tmap: mapTexture,\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmesh.material.map = mapTexture\r\n\t\t\t\t\t}\r\n\t\t\t\t} else {\r\n\t\t\t\t\t// 如果是当前模型材质自身贴图\r\n\t\t\t\t\tconst meshFrom = this.model.getObjectByProperty('name', v.meshFrom)\r\n\t\t\t\t\tconst { map } = meshFrom.material\r\n\t\t\t\t\t// 如果当前模型的材质类型被修改了，则使用用新的材质type\r\n\t\t\t\t\tif (material.materialType) {\r\n\t\t\t\t\t\tmesh.material = new (THREE as any)[type]({\r\n\t\t\t\t\t\t\tmap,\r\n\t\t\t\t\t\t})\r\n\t\t\t\t\t} else {\r\n\t\t\t\t\t\tmesh.material.map = map\r\n\t\t\t\t\t}\r\n\t\t\t\t}\r\n\t\t\t}\r\n\t\t\t// 设置材质显隐\r\n\t\t\tmesh.material.visible = visible\r\n\t\t\t//设置材质颜色\r\n\t\t\tmesh.material.color.set(new THREE.Color(color))\r\n\t\t\t//设置网格\r\n\t\t\tmesh.material.wireframe = wireframe\r\n\t\t\t// 设置深度写入\r\n\t\t\tmesh.material.depthWrite = depthWrite\r\n\t\t\t//设置透明度\r\n\t\t\tmesh.material.transparent = true\r\n\t\t\tmesh.material.opacity = opacity\r\n\t\t})\r\n\r\n\t}\r\n\t// 设置辉光和模型操作数据回填\r\n\tsetModelLaterStage() {\r\n\t\tconst { stage } = this.config\r\n\t\tif (!stage) return false\r\n\t\tconst { threshold, strength, radius, toneMappingExposure, meshPositonList } = stage\r\n\t\t// 设置辉光效果\r\n\t\tif (stage.glow) {\r\n\t\t\tthis.unrealBloomPass.threshold = threshold\r\n\t\t\tthis.unrealBloomPass.strength = strength\r\n\t\t\tthis.unrealBloomPass.radius = radius\r\n\t\t\tthis.renderer.toneMappingExposure = toneMappingExposure\r\n\r\n\t\t} else {\r\n\t\t\tthis.unrealBloomPass.threshold = 0\r\n\t\t\tthis.unrealBloomPass.strength = 0\r\n\t\t\tthis.unrealBloomPass.radius = 0\r\n\t\t\tthis.renderer.toneMappingExposure = toneMappingExposure\r\n\t\t}\r\n\t\t// 模型材质位置\r\n\t\tmeshPositonList.forEach((v: { name?: any; x?: any; y?: any; z?: any }) => {\r\n\t\t\tconst mesh = this.model.getObjectByProperty('name', v.name)\r\n\t\t\tconst { x, y, z } = v\r\n\t\t\tmesh.position.set(x, y, z)\r\n\t\t})\r\n\t}\r\n\t// 鼠标移入模型材质\r\n\tonMouseMoveModel(event: { clientX: number; clientY: number }) {\r\n\t\tif (this.modelAnimation.length) return false\r\n\t\tconst { clientHeight, clientWidth, offsetLeft, offsetTop } = this.container\r\n\t\tif (!this.mouse) return false\r\n\t\tthis.mouse.x = ((event.clientX - offsetLeft) / clientWidth) * 2 - 1\r\n\t\tthis.mouse.y = -((event.clientY - offsetTop) / clientHeight) * 2 + 1\r\n\t\tthis.raycaster.setFromCamera(this.mouse, this.camera)\r\n\t\tconst intersects = this.raycaster.intersectObjects(this.scene.children).filter((item) => (item.object as THREE.Mesh).isMesh && this.glowMaterialList.includes(item.object.name))\r\n\t\tif (intersects.length > 0) {\r\n\t\t\tconst meshTxt: HTMLElement = document.getElementById(\"mesh-txt\") as HTMLElement;\r\n\t\t\t// TODO:动画模型不显示材质标签\r\n\t\t\tif (this.modelAnimation.length) {\r\n\t\t\t\tdocument.body.style.cursor = 'pointer';\r\n\t\t\t\treturn false\r\n\t\t\t}\r\n\t\t\t// 判断是否开启显示材质标签\r\n\t\t\tconst { hoverMeshTag } = this.config.stage\r\n\t\t\tif (hoverMeshTag) {\r\n\t\t\t\t// 设置材质标签位置\r\n\t\t\t\tconst intersectedObject = intersects[0].object\r\n\t\t\t\tmeshTxt.innerHTML = intersectedObject.name\r\n\t\t\t\tmeshTxt.style.display = \"block\";\r\n\t\t\t\tmeshTxt.style.top = event.clientY - offsetTop + 'px';\r\n\t\t\t\tmeshTxt.style.left = event.clientX - offsetLeft + 20 + 'px';\r\n\t\t\t}\r\n\t\t\tdocument.body.style.cursor = 'pointer'\r\n\r\n\t\t} else {\r\n\t\t\tconst meshTxt: HTMLElement = document.getElementById(\"mesh-txt\") as HTMLElement;\r\n\t\t\tdocument.body.style.cursor = '';\r\n\t\t\tmeshTxt.style.display = \"none\";\r\n\r\n\t\t}\r\n\t}\r\n\t// 处理灯光数据回填\r\n\tsetSceneLight() {\r\n\t\tconst { light } = this.config\r\n\t\tif (!light) return false\r\n\t\t// 环境光\r\n\t\tif (light.ambientLight) {\r\n\t\t\t// 创建环境光\r\n\t\t\tconst ambientLight = new THREE.AmbientLight(light.ambientLightColor, light.ambientLightIntensity)\r\n\t\t\tambientLight.visible = light.ambientLight\r\n\t\t\tthis.scene.add(ambientLight)\r\n\t\t}\r\n\t\t// 平行光\r\n\t\tif (light.directionalLight) {\r\n\t\t\tconst directionalLight = new THREE.DirectionalLight(light.directionalLightColor, light.directionalLightIntensity)\r\n\t\t\tconst { x, y, z } = lightPosition(light.directionalHorizontal, light.directionalVertical, light.directionalSistance)\r\n\t\t\tdirectionalLight.position.set(x, y, z)\r\n\t\t\tdirectionalLight.castShadow = light.directionaShadow\r\n\t\t\tdirectionalLight.visible = light.directionalLight\r\n\t\t\tthis.scene.add(directionalLight)\r\n\t\t\tconst directionalLightHelper = new THREE.DirectionalLightHelper(directionalLight, .5)\r\n\t\t\tdirectionalLightHelper.visible = light.directionalLightHelper\r\n\t\t\tthis.scene.add(directionalLightHelper)\r\n\t\t}\r\n\t\t// 点光源\r\n\t\tif (light.pointLight) {\r\n\t\t\tconst pointLight = new THREE.PointLight(light.pointLightColor, light.pointLightIntensity, 100)\r\n\t\t\tpointLight.visible = light.pointLight\r\n\t\t\tconst { x, y, z } = lightPosition(light.pointHorizontal, light.pointVertical, light.pointSistance)\r\n\t\t\tpointLight.position.set(x, y, z)\r\n\t\t\tthis.scene.add(pointLight)\r\n\t\t\t// 创建点光源辅助线\r\n\t\t\tconst pointLightHelper = new THREE.PointLightHelper(pointLight, .5)\r\n\t\t\tpointLightHelper.visible = light.pointLightHelper\r\n\t\t\tthis.scene.add(pointLightHelper)\r\n\t\t}\r\n\t\t// 聚光灯\r\n\t\tif (light.spotLight) {\r\n\t\t\tconst spotLight = new THREE.SpotLight(light.spotLightColor, 900);\r\n\t\t\tspotLight.visible = light.spotLight\r\n\t\t\tspotLight.map = new THREE.TextureLoader().load(require('@/assets/image/model-bg-1.jpg'));\r\n\t\t\tspotLight.decay = 2;\r\n\t\t\tspotLight.shadow.mapSize.width = 1920;\r\n\t\t\tspotLight.shadow.mapSize.height = 1080;\r\n\t\t\tspotLight.shadow.camera.near = 1;\r\n\t\t\tspotLight.shadow.camera.far = 10;\r\n\t\t\tspotLight.intensity = light.spotLightIntensity\r\n\t\t\tspotLight.angle = light.spotAngle\r\n\t\t\tspotLight.penumbra = light.spotPenumbra\r\n\t\t\tspotLight.shadow.focus = light.spotFocus\r\n\t\t\tspotLight.castShadow = light.spotCastShadow\r\n\t\t\tspotLight.distance = light.spotDistance\r\n\t\t\tconst { x, y, z } = lightPosition(light.spotHorizontal, light.spotVertical, light.spotSistance)\r\n\t\t\tspotLight.position.set(x, y, z)\r\n\t\t\tthis.scene.add(spotLight);\r\n\t\t\t//创建聚光灯辅助线\r\n\t\t\tconst spotLightHelper = new THREE.SpotLightHelper(spotLight);\r\n\t\t\tspotLightHelper.visible = light.spotLightHelper && light.spotLight\r\n\t\t\tthis.scene.add(spotLightHelper)\r\n\t\t}\r\n\t\t// 模型平面\r\n\t\tif (light.planeGeometry) {\r\n\t\t\tconst geometry = new THREE.PlaneGeometry(light.planeWidth, light.planeHeight);\r\n\t\t\tvar groundMaterial = new THREE.MeshStandardMaterial({ color: light.planeColor });\r\n\t\t\tconst planeGeometry: any = new THREE.Mesh(geometry, groundMaterial);\r\n\t\t\tplaneGeometry.name = 'planeGeometry'\r\n\t\t\tplaneGeometry.rotation.x = -Math.PI / 2\r\n\t\t\tplaneGeometry.position.set(0, -.5, 0)\r\n\t\t\tplaneGeometry.visible = light.planeGeometry\r\n\t\t\tplaneGeometry.geometry.verticesNeedUpdate = true\r\n\t\t\t// 让地面接收阴影\r\n\t\t\tplaneGeometry.receiveShadow = true;\r\n\t\t\tthis.scene.add(planeGeometry);\r\n\t\t}\r\n\t}\r\n\t// 处理模型动画数据回填\r\n\tsetModelAnimation() {\r\n\t\tconst { animation } = this.config\r\n\t\tif (!animation) return false\r\n\t\tif (this.modelAnimation.length && animation && animation.visible) {\r\n\t\t\tthis.animationMixer = new THREE.AnimationMixer(this.model)\r\n\t\t\tconst { animationName, timeScale, weight, loop } = animation\r\n\t\t\t// 模型动画\r\n\t\t\tconst clip = THREE.AnimationClip.findByName(this.modelAnimation, animationName)\r\n\t\t\tif (clip) {\r\n\t\t\t\tthis.animateClipAction = this.animationMixer.clipAction(clip)\r\n\t\t\t\tthis.animateClipAction.setEffectiveTimeScale(timeScale)\r\n\t\t\t\tthis.animateClipAction.setEffectiveWeight(weight)\r\n\t\t\t\tthis.animateClipAction.setLoop(this.loopMap[loop])\r\n\t\t\t\tthis.animateClipAction.play()\r\n\t\t\t}\r\n\t\t\tthis.animationFrameFun()\r\n\t\t}\r\n\t\t// 轴动画\r\n\t\tif (animation.rotationVisible) {\r\n\t\t\tconst { rotationType, rotationSpeed } = animation\r\n\t\t\tthis.rotationAnimationFun(rotationType, rotationSpeed)\r\n\t\t}\r\n\t}\r\n\t// 模型动画帧\r\n\tanimationFrameFun() {\r\n\t\tthis.animationFrame = requestAnimationFrame(() => this.animationFrameFun())\r\n\t\tif (this.animationMixer && this.animationColock) {\r\n\t\t\tthis.animationMixer.update(this.animationColock.getDelta())\r\n\t\t}\r\n\t}\r\n\t// 轴动画帧\r\n\trotationAnimationFun(rotationType: string | number, rotationSpeed: number) {\r\n\t\tthis.rotationAnimationFrame = requestAnimationFrame(() => this.rotationAnimationFun(rotationType, rotationSpeed))\r\n\t\tthis.model.rotation[rotationType] += rotationSpeed / 50\r\n\t}\r\n\t// 模型轴辅助线配置\r\n\tsetModelAxleLine() {\r\n\t\tconst { attribute } = this.config\r\n\r\n\t\tif (!attribute) return false\r\n\t\tconst { axesHelper, axesSize, color, divisions, gridHelper, positionX, positionY, positionZ, size, skeletonHelper, visible, x, y, z, rotationX, rotationY, rotationZ } = attribute\r\n\t\tif (!visible) return false\r\n\t\t//网格辅助线\r\n\t\tthis.gridHelper = new THREE.GridHelper(size, divisions, color, color);\r\n\t\tthis.gridHelper.position.set(x, y, z)\r\n\t\tthis.gridHelper.visible = gridHelper\r\n\t\tthis.gridHelper.material.linewidth = 0.1\r\n\t\tthis.scene.add(this.gridHelper)\r\n\t\t// 坐标轴辅助线\r\n\t\tthis.axesHelper = new THREE.AxesHelper(axesSize);\r\n\t\tthis.axesHelper.visible = axesHelper\r\n\t\tthis.axesHelper.position.set(0, -.50, 0)\r\n\t\tthis.scene.add(this.axesHelper);\r\n\r\n\t\t// 骨骼辅助线\r\n\t\tthis.skeletonHelper.visible = skeletonHelper\r\n\r\n\t\t// 设置模型位置\r\n\t\tthis.model.position.set(positionX, positionY, positionZ)\r\n\t\t// 设置模型轴位置\r\n\t\tthis.model.rotation.set(rotationX, rotationY, rotationZ)\r\n\t\t// 开启阴影\r\n\t\tthis.renderer.shadowMap.enabled = true;\r\n\r\n\t}\r\n\r\n}\r\n\r\n\r\n/**\r\n * @describe 动态创建3d模型组件的方法\r\n * @param config 组件参数配置信息\r\n*/\r\n\r\nfunction createThreeDComponent(config: any) {\r\n\r\n\t// 创建一个元素ID \r\n\tconst elementId = 'answer' + onlyKey(5, 10)\r\n\tlet modelApi: any = null\r\n\treturn defineComponent({\r\n\t\tdata() {\r\n\t\t\treturn {\r\n\t\t\t\tloading: false,\r\n\t\t\t}\r\n\t\t},\r\n\t\tprops: {\r\n\t\t\twidth: {\r\n\t\t\t\ttype: Number,\r\n\t\t\t\trequired: false,\r\n\t\t\t},\r\n\t\t\theight: {\r\n\t\t\t\ttype: Number,\r\n\t\t\t\trequired: false,\r\n\t\t\t},\r\n\t\t},\r\n\t\twatch: {\r\n\t\t\t$props: {\r\n\t\t\t\thandler() {\r\n\t\t\t\t\tif (modelApi) {\r\n\t\t\t\t\t\tdebounce(modelApi.onWindowResize(), 200)\r\n\t\t\t\t\t}\r\n\t\t\t\t},\r\n\t\t\t\timmediate: false,\r\n\t\t\t\tdeep: true\r\n\t\t\t}\r\n\t\t},\r\n\t\trender() {\r\n\t\t\tconst zLoading = resolveDirective('zLoading')\r\n\t\t\tif (this.width && this.height) {\r\n\t\t\t\treturn withDirectives(h('div', {\r\n\t\t\t\t\tstyle: {\r\n\t\t\t\t\t\twidth: this.width - 10 + 'px',\r\n\t\t\t\t\t\theight: this.height - 10 + 'px',\r\n\t\t\t\t\t\tpointerEvents: 'none',\r\n\t\t\t\t\t},\r\n\t\t\t\t\tid: elementId,\r\n\t\t\t\t}), [\r\n\t\t\t\t\t[zLoading, this.loading]\r\n\t\t\t\t])\r\n\t\t\t} else {\r\n\t\t\t\treturn withDirectives(h('div', {\r\n\t\t\t\t\tstyle: {\r\n\t\t\t\t\t\twidth: '100%',\r\n\t\t\t\t\t\theight: '100%',\r\n\t\t\t\t\t},\r\n\t\t\t\t\tid: elementId,\r\n\t\t\t\t}), [\r\n\t\t\t\t\t[zLoading, this.loading]\r\n\t\t\t\t])\r\n\r\n\t\t\t}\r\n\t\t},\r\n\t\tasync mounted() {\r\n\t\t\tthis.loading = true\r\n\t\t\tmodelApi = new renderModel(config, elementId);\r\n\t\t\tconst load = await modelApi.init()\r\n\t\t\tif (load) {\r\n\t\t\t\tthis.loading = false\r\n\t\t\t}\r\n\t\t},\r\n\t\tbeforeUnmount() {\r\n\t\t\tmodelApi.onClearModelData()\r\n\t\t}\r\n\t})\r\n}\r\n\r\n\r\n\r\n\r\nexport default createThreeDComponent"],"names":["renderModel","constructor","config","elementId","_defineProperty","this","container","document","querySelector","camera","scene","renderer","controls","model","fileLoaderMap","GLTFLoader","FBXLoader","OBJLoader","modelAnimation","animationMixer","animationColock","THREE","animationFrame","rotationAnimationFrame","animateClipAction","loopMap","LoopOnce","LoopRepeat","LoopPingPong","skeletonHelper","gridHelper","axesHelper","planeGeometry","modelMaterialList","effectComposer","outlinePass","renderAnimation","raycaster","mouse","modelTextureMap","glowComposer","unrealBloomPass","glowMaterialList","materials","onWindowResizesListener","onMouseMoveListener","init","Promise","async","reslove","reject","initRender","initCamera","initScene","initControls","load","loadModel","fileInfo","createEffectComposer","setSceneBackground","setModelMeaterial","setModelLaterStage","setSceneLight","setModelAnimation","setModelAxleLine","sceneAnimation","addEvenListMouseLisatener","antialias","alpha","setPixelRatio","window","devicePixelRatio","clientHeight","clientWidth","setSize","toneMapping","autoClear","toneMappingExposure","shadowMap","enabled","type","meshTxt","createElement","id","appendChild","domElement","near","x","y","z","position","set","updateProjectionMatrix","onWindowResize","bind","addEventListener","onMouseMoveModel","OrbitControls","enablePan","requestAnimationFrame","update","traverse","v","background","includes","name","isMesh","uuid","material","color","render","EffectComposer","renderPass","RenderPass","addPass","OutlinePass","visibleEdgeColor","hiddenEdgeColor","edgeGlow","edgeThickness","edgeStrength","pulsePeriod","outputPass","OutputPass","effectFXAA","ShaderPass","FXAAShader","pixelRatio","getPixelRatio","uniforms","resolution","value","renderToScreen","needsSwap","UnrealBloomPass","renderTargetParameters","minFilter","magFilter","format","stencilBuffer","glowRender","shaderPass","baseTexture","bloomTexture","renderTarget2","texture","tDiffuse","vertexShader","fragmentShader","defines","modelFile","filePath","fileType","scale","map","resolve","loader","result","getModelMeaterialList","animations","setModelPositionSize","visible","add","err","ElMessage","error","console","log","aspect","onClearModelData","cancelAnimationFrame","geometry","dispose","clear","removeEventListener","updateMatrixWorld","box","setFromObject","size","getSize","center","getCenter","maxSize","Math","max","targetSize","maxDistance","length","lookAt","isMap","castShadow","frustumCulled","newMaterial","clone","push","mapTexture","image","viewImg","mapping","environment","meshList","mapIdList","mapImageList","forEach","mesh","getObjectByProperty","meshName","opacity","depthWrite","wireframe","materialType","meshFrom","mapInfo","find","m","url","transparent","stage","threshold","strength","radius","meshPositonList","glow","event","offsetLeft","offsetTop","clientX","clientY","setFromCamera","intersects","intersectObjects","children","filter","item","object","getElementById","body","style","cursor","hoverMeshTag","intersectedObject","innerHTML","display","top","left","light","ambientLight","ambientLightColor","ambientLightIntensity","directionalLight","directionalLightColor","directionalLightIntensity","lightPosition","directionalHorizontal","directionalVertical","directionalSistance","directionaShadow","directionalLightHelper","pointLight","pointLightColor","pointLightIntensity","pointHorizontal","pointVertical","pointSistance","pointLightHelper","spotLight","spotLightColor","require","decay","shadow","mapSize","width","height","far","intensity","spotLightIntensity","angle","spotAngle","penumbra","spotPenumbra","focus","spotFocus","spotCastShadow","distance","spotDistance","spotHorizontal","spotVertical","spotSistance","spotLightHelper","planeWidth","planeHeight","groundMaterial","planeColor","rotation","PI","verticesNeedUpdate","receiveShadow","animation","animationName","timeScale","weight","loop","clip","findByName","clipAction","setEffectiveTimeScale","setEffectiveWeight","setLoop","play","animationFrameFun","rotationVisible","rotationType","rotationSpeed","rotationAnimationFun","getDelta","attribute","axesSize","divisions","positionX","positionY","positionZ","rotationX","rotationY","rotationZ","linewidth","createThreeDComponent","onlyKey","modelApi","defineComponent","data","loading","props","Number","required","watch","$props","handler","debounce","immediate","deep","zLoading","resolveDirective","withDirectives","h","pointerEvents","mounted","beforeUnmount"],"sourceRoot":""}